
spBottomClauseSqlStatementTemplate(relation,attribute,attributeNumber,queryLimit) ::= <<
public final SQLStmt SQL_$relation$_$attributeNumber$ = new SQLStmt("SELECT * FROM $relation$ WHERE $attribute$ IN ? LIMIT $queryLimit$;");
>>

spNewListeralsForGroupedModesClear() ::= <<
newLiteralsForGroupedModes.clear();
>>

spBottomClauseModeTemplate(relation,modeBString,attributeNumber) ::= <<
newLiteralsForGroupedModes.addAll(modeBOperation(recall, clauseLiterals, clauseLiteralsByRelation, hashConstantToVariable, hashVariableToConstant, inTerms, newInTerms, distinctTerms, "$modeBString$", SQL_$relation$_$attributeNumber$, $attributeNumber$));
>>

spBottomClauseInclusionDependencyTemplate(leftIndPredicate,leftIndAttNumber,rightIndPredicate,rightIndAttNumber,modesForRightIndPredicate) ::= <<
newLiteralsForGroupedModes.addAll(applyInclusionDependency(recall, clauseLiterals, clauseLiteralsByRelation, hashConstantToVariable, hashVariableToConstant, newInTerms, distinctTerms, "$leftIndPredicate$", $leftIndAttNumber$, "$rightIndPredicate$", $rightIndAttNumber$, "$modesForRightIndPredicate$", SQL_$rightIndPredicate$_$rightIndAttNumber$, newLiteralsForGroupedModes));
>>


spBottomClauseProcedureTemplate(package,name,variablePrefix,sqlStatements,modeHString,modesBOperations,indOperations) ::= <<
package $package$;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.voltdb.SQLStmt;
import org.voltdb.VoltProcedure;
import org.voltdb.VoltTable;
import org.voltdb.VoltType;

public class $name$ extends VoltProcedure {

	public final String TYPE_INPUT = "+";
	public final String TYPE_OUTPUT = "-";
	public final String TYPE_CONSTANT = "#";
	
	public static final String VARIABLE_PREFIX = "$variablePrefix$";
	private static final String NULL_PREFIX = "null"; 

	$sqlStatements$

	private int varCounter = 0;
	private int nullCounter = 0;

	public VoltTable[] run(String exampleTuple, int iterations, int recall, int maxTerms) throws VoltAbortException {
		Set<Literal> clauseLiterals = new LinkedHashSet<Literal>();
		Map<String,Set<Literal\>> clauseLiteralsByRelation = new HashMap<String,Set<Literal\>>();
		// Two hash tables: from constant to variable, and from variable to constant
		Map<String, String> hashConstantToVariable = new HashMap<String,String>();
		Map<String, String> hashVariableToConstant = new HashMap<String,String>();
		// Known terms for a data type
		Map<String,Set<String\>> inTerms = new HashMap<String, Set<String\>>();
		// Keep track of all used variables and constants in clause
		Set<String> distinctTerms = new HashSet<String>();

		// Initialize variable counter, which is used to create new variables
		varCounter = 0;
		nullCounter = 0;

		// Divide example tuple into attributes
		//String[] exampleAttributes = exampleTuple.split(",|\\\\s+");
		String[] exampleAttributes = exampleTuple.split("\\\\|");

		// Get modeH information
		String modeH = "$modeHString$";
		String[] modeHTokens = modeH.split("\\\\(|\\\\)");
		String modeHPredicate = modeHTokens[0];
		String[] modeHArguments = modeHTokens[1].split(",|\\\\s+");
		// Create head literal
		List<String> headTerms = new ArrayList<String>();
		for (int i = 0; i < modeHArguments.length; i++) {
			String value = exampleAttributes[i];
			if (getArgumentIdentifierType(modeHArguments[i]).equals(TYPE_CONSTANT)) {
				headTerms.add('"'+value+'"');
				distinctTerms.add(value);
			} else {
				// INPUT or OUTPUT type
				String valueWithSuffix = value + "_" + getArgumentType(modeHArguments[i]);
				if(!hashConstantToVariable.containsKey(valueWithSuffix)) {
					String var = newVariable(varCounter);
					varCounter++;
					
					hashConstantToVariable.put(valueWithSuffix, var);
					hashVariableToConstant.put(var, value);
					
					distinctTerms.add(var);
				}
				headTerms.add(hashConstantToVariable.get(valueWithSuffix));
			}
			// Add constants to inTerms
			if (getArgumentIdentifierType(modeHArguments[i]).equals(TYPE_INPUT) ||
					getArgumentIdentifierType(modeHArguments[i]).equals(TYPE_CONSTANT)) {
				String variableType = getArgumentType(modeHArguments[i]);
				if(!inTerms.containsKey(variableType)) {
					inTerms.put(variableType, new HashSet<String>());
				}
				inTerms.get(variableType).add(value);
			}
		}
//		String headLiteral = modeHPredicate + "(" + String.join(",", headTerms) + ")";
//		clauseLiterals.add(headLiteral);
		clauseLiterals.add(new Literal(modeHPredicate, headTerms));

		// Create body literals
		for (int j = 0; j < iterations; j++) {
			// Create new inTerms to hold terms for this iteration
			Map<String,Set<String\>> newInTerms = new HashMap<String, Set<String\>>();

			List<Literal> newLiteralsForGroupedModes = new LinkedList<Literal>();

			$modesBOperations$

			// Add new terms to inTerms
			/*Iterator<Map.Entry<String,Set<String>\>> newInTermsIterator = newInTerms.entrySet().iterator();
		    while (newInTermsIterator.hasNext()) {
		        Map.Entry<String,Set<String\>> pair = (Map.Entry<String,Set<String\>>)newInTermsIterator.next();
		        String variableType = pair.getKey();
		        if (!inTerms.containsKey(variableType)) {
		        	inTerms.put(variableType, new HashSet<String>());
		        }
		        inTerms.get(variableType).addAll(newInTerms.get(variableType));
		    }*/
		    inTerms.clear();
			inTerms.putAll(newInTerms);
		    
		    // Stopping condition: check number of distinct terms
		    if (distinctTerms.size() >= maxTerms) {
		    	break;
		    }
		}

		// Create table where each attribute is a literal
		VoltTable.ColumnInfo[] columns = new VoltTable.ColumnInfo[clauseLiterals.size()];
		Object[] columnValues = new Object[clauseLiterals.size()];
		int colCounter = 0;
		for (Literal literal : clauseLiterals) {
			columns[colCounter] = new VoltTable.ColumnInfo("col"+colCounter, VoltType.STRING);
			columnValues[colCounter] = literal.toString();
			colCounter++;
		}
		VoltTable clauseTable = new VoltTable(columns);
		clauseTable.addRow(columnValues);
		VoltTable[] returnValue = new VoltTable[1];
		returnValue[0] = clauseTable;

		return returnValue;
	}

	/*
	 * Apply an inclusion dependency: leftIndPredicate:leftIndAttNumber \subset rightIndPredicate:rightIndAttNumber
	 */
	private List<Literal> applyInclusionDependency(int recall, Set<Literal> clauseLiterals, Map<String,Set<Literal\>> clauseLiteralsByRelation,
			Map<String, String> hashConstantToVariable, Map<String, String> hashVariableToConstant, Map<String, Set<String\>> newInTerms, Set<String> distinctTerms,
			String leftIndPredicate, int leftIndAttNumber, String rightIndPredicate, int rightIndAttNumber, 
			String modesTogether, SQLStmt sqlStatement, List<Literal> newLiteralsForGroupedModes) {
		
		List<Literal> newLiterals = new LinkedList<Literal>();
		
		// For each literal with predicate equal to leftIndPredicate, check if IND holds
		//TODO creating list to get element at position. Ideally, we wouldn't have to create a new list.
		List<Literal> clauseLiteralsList = new ArrayList<Literal>(clauseLiterals);
		
		for (int i = 0; i < newLiteralsForGroupedModes.size(); i++) {
			Literal literal = newLiteralsForGroupedModes.get(i);
			String predicate = getPredicate(literal);
			
			if (predicate.equals(leftIndPredicate)) {
				String leftIndTerm = getTermAtPos(literal, leftIndAttNumber);
				
				// Check if IND is satisfied
				boolean indSatisfied = false;
				for (int j = 0; j < clauseLiteralsList.size(); j++) {
					Literal otherLiteral = clauseLiteralsList.get(j);
					String otherPredicate = getPredicate(otherLiteral);
					
					if (otherPredicate.equals(rightIndPredicate)) {
						String rightIndTerm = getTermAtPos(otherLiteral, rightIndAttNumber);
						
						if (leftIndTerm.equals(rightIndTerm)) {
							// IND satisfied
							indSatisfied = true;
							break;
						}
					}
				}
				
				// If IND is not satisfied, add literals that make IND satisfied
				if (!indSatisfied) {
					// Get constant value
					String value;
					if (isVariable(leftIndTerm)) {
						value = hashVariableToConstant.get(leftIndTerm);
					} else {
						value = leftIndTerm.substring(1, leftIndTerm.length()-1);
					}
					
					String[] modes = modesTogether.split(";");
					for (int k = 0; k < modes.length; k++) {
						List<Literal> modeBLiterals = modeBOperationForInd(recall, clauseLiterals, clauseLiteralsByRelation, hashConstantToVariable, hashVariableToConstant, value, newInTerms, distinctTerms, modes[k], sqlStatement, rightIndAttNumber);
						addNotRepeated(newLiterals, modeBLiterals);
					}
				}
			}
		}
		return newLiterals;
	}
	
	/*
	 * Apply a mode operation and add literals to clause
	 */
	private List<Literal> modeBOperation(int recall, Set<Literal> clauseLiterals, Map<String,Set<Literal\>> clauseLiteralsByRelation, Map<String,String> hashConstantToVariable, Map<String, String> hashVariableToConstant, Map<String,Set<String\>> inTerms, Map<String,Set<String\>> newInTerms, Set<String> distinctTerms, String modeBString, SQLStmt sqlStatement, int attributeNumber) {
		//System.out.println("MODE:"+modeBString);
		String[] modeBTokens = modeBString.split("\\\\(|\\\\)");
		String modeBPredicate = modeBTokens[0];
		String[] modeBArguments = modeBTokens[1].split(",|\\\\s+");
		String attributeType = getArgumentType(modeBArguments[attributeNumber]);
		List<Literal> newLiterals = new LinkedList<Literal>();
		if (inTerms.containsKey(attributeType)) {
			String[] knownTerms = inTerms.get(attributeType).toArray(new String[inTerms.get(attributeType).size()]);
            voltQueueSQL(sqlStatement, (Object)knownTerms);
            VoltTable[] response = voltExecuteSQL();
    		List<Literal> responseLiterals = createLiteralsFromResponse(recall, hashConstantToVariable, hashVariableToConstant, newInTerms, distinctTerms, response[0], modeBPredicate, modeBArguments);
    		addNotRepeated(newLiterals, responseLiterals);
    		//clauseLiterals.addAll(newLiterals);
    		addNotRepeated(clauseLiterals, clauseLiteralsByRelation, responseLiterals);
		}
		return newLiterals;
	}
	
	/*
	 * Apply a mode operation for inclusion dependency and add literals to clause
	 */
	private List<Literal> modeBOperationForInd(int recall, Set<Literal> clauseLiterals, Map<String,Set<Literal\>> clauseLiteralsByRelation, Map<String,String> hashConstantToVariable, Map<String, String> hashVariableToConstant, String value, Map<String,Set<String\>> newInTerms, Set<String> distinctTerms, String modeBString, SQLStmt sqlStatement, int attributeNumber) {
		//System.out.println("INDS:"+modeBString);
		String[] modeBTokens = modeBString.split("\\\\(|\\\\)");
		String modeBPredicate = modeBTokens[0];
		String[] modeBArguments = modeBTokens[1].split(",|\\\\s+");
		//String attributeType = getArgumentType(modeBArguments[attributeNumber]);
		
		String[] knownTerms = {value};
		voltQueueSQL(sqlStatement, (Object)knownTerms);
        VoltTable[] response = voltExecuteSQL();
		List<Literal> newLiterals = createLiteralsFromResponse(recall, hashConstantToVariable, hashVariableToConstant, newInTerms, distinctTerms, response[0], modeBPredicate, modeBArguments);
		//clauseLiterals.addAll(newLiterals);
		addNotRepeated(clauseLiterals, clauseLiteralsByRelation, newLiterals);
		return newLiterals;
	}
	
	/*
	 * Given a VoltTable, create literals for each row
	 */
	private List<Literal> createLiteralsFromResponse(int recall, Map<String,String> hashConstantToVariable, Map<String, String> hashVariableToConstant, Map<String,Set<String\>> newInTerms, Set<String> knownTerms, VoltTable table, String modeBPredicate, String[] modeBArguments) {
		List<Literal> literals = new LinkedList<Literal>();

		int solutionsCounter = 0;
		while(table.advanceRow() && solutionsCounter < recall) {
        	List<String> terms = new ArrayList<String>();
        	for (int i = 0; i < modeBArguments.length; i++) {
        		//String value = table.get(i, table.getColumnType(i)).toString();
        		//TODO default value for nulls? distinct value?
				String value;
				if (table.get(i, table.getColumnType(i)) != null) {
					value = table.get(i, table.getColumnType(i)).toString();
				}
				else {
					value = NULL_PREFIX+nullCounter;
					nullCounter++;
				}

        		if (getArgumentIdentifierType(modeBArguments[i]).equals(TYPE_CONSTANT)) {
        			terms.add('"'+value+'"');
        			knownTerms.add(value);
        		} else {
    				// INPUT or OUTPUT type
    				String valueWithSuffix = value + "_" + getArgumentType(modeBArguments[i]);
    				if(!hashConstantToVariable.containsKey(valueWithSuffix)) {
    					String var = newVariable(varCounter);
    					varCounter++;
    					
    					hashConstantToVariable.put(valueWithSuffix, var);
    					hashVariableToConstant.put(var, value);
    					
    					knownTerms.add(var);
    				}
    				terms.add(hashConstantToVariable.get(valueWithSuffix));
    			}

    			// If OUTPUT variable, add constants to inTerms
//    			if (getArgumentIdentifierType(modeBArguments[i]).equals(TYPE_OUTPUT) ||
//    					getArgumentIdentifierType(modeBArguments[i]).equals(TYPE_CONSTANT)) {
    				String variableType = getArgumentType(modeBArguments[i]);
    				if(!newInTerms.containsKey(variableType)) {
    					newInTerms.put(variableType, new HashSet<String>());
    				}
    				newInTerms.get(variableType).add(value);
//    			}
    		}
//        	String literal = modeBPredicate + "(" + String.join(",", terms) + ")";
//    		literals.add(literal);
			//System.out.println(modeBPredicate + "(" + String.join(",", terms) + ")");
        	literals.add(new Literal(modeBPredicate, terms));
    		solutionsCounter++;
		}
		return literals;
	}

	/*
	 * Get predicate name from literal
	 */
	private String getPredicate(Literal literal) {
		return literal.getPredicate();
	}
	
	/*
	 * Get term at the specified position from literal
	 */
	private String getTermAtPos(Literal literal, int position) {
		return literal.getTerms().get(position);
	}
	
	/*
	 * Add non-repeated newLiterals to literals
	 */
	private boolean addNotRepeated(Set<Literal> literals, Map<String,Set<Literal\>> clauseLiteralsByRelation, List<Literal> newLiterals) {
		boolean modified = false;
		for (Literal newLiteral : newLiterals) {
			if (!literals.contains(newLiteral)) {
				literals.add(newLiteral);
				
				if (!clauseLiteralsByRelation.containsKey(newLiteral.getPredicate())) {
					clauseLiteralsByRelation.put(newLiteral.getPredicate(), new LinkedHashSet<Literal>());
				}
				clauseLiteralsByRelation.get(newLiteral.getPredicate()).add(newLiteral);
				
				modified = true;
			}
		}
		return modified;
	}
	
	/*
	 * Add non-repeated newLiterals to literals
	 */
	private void addNotRepeated(List<Literal> literals, List<Literal> newLiterals) {
		for (Literal newLiteral : newLiterals) {
			if (!literals.contains(newLiteral)) {
				literals.add(newLiteral);
			}
		}
	}

	/*
	 * Get identifier type: +, - or #
	 */
	private String getArgumentIdentifierType(String argument) {
		return argument.substring(0, 1);
	}

	/*
	 * Get argument type: from +type, extract type
	 */
	private String getArgumentType(String argument) {
		return argument.substring(1, argument.length());
	}

	/*
	 * Create new variable from variable counter
	 */
	private String newVariable(int varCounter) {
		return VARIABLE_PREFIX + varCounter;
	}
	
	/*
	 * Check if term is a variable
	 */
	private boolean isVariable(String term) {
		if (term.startsWith(VARIABLE_PREFIX)) 
			return true;
		return false;
	}
	
	class Literal {
		private String predicate;
		private List<String> terms;
		public Literal(String predicate, List<String> terms) {
			super();
			this.predicate = predicate;
			this.terms = terms;
		}
		public String getPredicate() {
			return predicate;
		}
		public List<String> getTerms() {
			return terms;
		}
		@Override
		public String toString() {
			return predicate + "(" + String.join(",", terms) + ")";
		}
		@Override
	    public boolean equals(Object obj) {
	       if (!(obj instanceof Literal))
	            return false;
	        if (obj == this)
	            return true;

	        Literal rhs = (Literal) obj;
	        if (predicate.equals(rhs.predicate) && terms.equals(rhs.terms))
	        	return true;
	        return false;

	    }
		@Override
		public int hashCode() {
			return this.toString().hashCode();
		}
	}
}
>>

spBottomClauseProcedureTemplateNEW(package,name,variablePrefix,sqlStatements,modeHString,modesBOperations,indOperations) ::= <<
package $package$;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.voltdb.SQLStmt;
import org.voltdb.VoltProcedure;
import org.voltdb.VoltTable;
import org.voltdb.VoltType;

public class $name$ extends VoltProcedure {

	public final String TYPE_INPUT = "+";
	public final String TYPE_OUTPUT = "-";
	public final String TYPE_CONSTANT = "#";
	
	public static final String VARIABLE_PREFIX = "$variablePrefix$"; 

	$sqlStatements$

	private int varCounter = 0;

	public VoltTable[] run(String exampleTuple, int iterations, int recall, int maxTerms) throws VoltAbortException {
		List<Literal> clauseLiterals = new LinkedList<Literal>();
		// Two hash tables: from constant to variable, and from variable to constant
		Map<String, String> hashConstantToVariable = new HashMap<String,String>();
		Map<String, String> hashVariableToConstant = new HashMap<String,String>();
		// Known terms for a data type
		Map<String,Set<String\>> inTerms = new HashMap<String, Set<String\>>();
		// Keep track of all used variables and constants in clause
		Set<String> distinctTerms = new HashSet<String>();

		// Initialize variable counter, which is used to create new variables
		varCounter = 0;

		// Divide example tuple into attributes
		//String[] exampleAttributes = exampleTuple.split(",|\\\\s+");
		String[] exampleAttributes = exampleTuple.split("\\\\|");

		// Get modeH information
		String modeH = "$modeHString$";
		String[] modeHTokens = modeH.split("\\\\(|\\\\)");
		String modeHPredicate = modeHTokens[0];
		String[] modeHArguments = modeHTokens[1].split(",|\\\\s+");
		// Create head literal
		List<String> headTerms = new ArrayList<String>();
		for (int i = 0; i < modeHArguments.length; i++) {
			String value = exampleAttributes[i];
			if (getArgumentIdentifierType(modeHArguments[i]).equals(TYPE_CONSTANT)) {
				headTerms.add('"'+value+'"');
				distinctTerms.add(value);
			} else {
				// INPUT or OUTPUT type
				if(!hashConstantToVariable.containsKey(value)) {
					String var = newVariable(varCounter);
					varCounter++;
					
					hashConstantToVariable.put(value, var);
					hashVariableToConstant.put(var, value);
					
					distinctTerms.add(var);
				}
				headTerms.add(hashConstantToVariable.get(value));
			}
			// Add constants to inTerms
			if (getArgumentIdentifierType(modeHArguments[i]).equals(TYPE_INPUT) ||
					getArgumentIdentifierType(modeHArguments[i]).equals(TYPE_CONSTANT)) {
				String variableType = getArgumentType(modeHArguments[i]);
				if(!inTerms.containsKey(variableType)) {
					inTerms.put(variableType, new HashSet<String>());
				}
				inTerms.get(variableType).add(value);
			}
		}
//		String headLiteral = modeHPredicate + "(" + String.join(",", headTerms) + ")";
//		clauseLiterals.add(headLiteral);
		clauseLiterals.add(new Literal(modeHPredicate, headTerms));


		// Create body literals
		for (int j = 0; j < iterations; j++) {
			// Create new inTerms to hold terms for this iteration
			Map<String,Set<String\>> newInTerms = new HashMap<String, Set<String\>>();

			$modesBOperations$

			// Add new terms to inTerms
			Iterator<Map.Entry<String,Set<String>\>> newInTermsIterator = newInTerms.entrySet().iterator();
		    while (newInTermsIterator.hasNext()) {
		        Map.Entry<String,Set<String\>> pair = (Map.Entry<String,Set<String\>>)newInTermsIterator.next();
		        String variableType = pair.getKey();
		        if (!inTerms.containsKey(variableType)) {
		        	inTerms.put(variableType, new HashSet<String>());
		        }
		        inTerms.get(variableType).addAll(newInTerms.get(variableType));
		    }
		    
		    // Stopping condition: check number of distinct terms
		    if (distinctTerms.size() >= maxTerms) {
		    	break;
		    }
		}

		// Create table where each attribute is a literal
		VoltTable.ColumnInfo[] columns = new VoltTable.ColumnInfo[clauseLiterals.size()];
		Object[] columnValues = new Object[clauseLiterals.size()];
		for (int i = 0; i < columns.length; i++) {
			columns[i] = new VoltTable.ColumnInfo("col"+i, VoltType.STRING);
			columnValues[i] = clauseLiterals.get(i).toString();
		}
		VoltTable clauseTable = new VoltTable(columns);
		clauseTable.addRow(columnValues);		
		VoltTable[] returnValue = new VoltTable[1];
		returnValue[0] = clauseTable;

		return returnValue;
	}

	/*
	 * Apply an inclusion dependency: leftIndPredicate:leftIndAttNumber \subset rightIndPredicate:rightIndAttNumber
	 */
	private void applyInclusionDependency(int recall, List<Literal> clauseLiterals, 
			Map<String, String> hashConstantToVariable, Map<String, String> hashVariableToConstant, Map<String, Set<String\>> newInTerms, Set<String> distinctTerms,
			String leftIndPredicate, int leftIndAttNumber, String rightIndPredicate, int rightIndAttNumber, 
			String modesTogether, SQLStmt sqlStatement) {
		
		// For each literal with predicate equal to leftIndPredicate, check if IND holds
		for (int i = 0; i < clauseLiterals.size(); i++) {
			Literal literal = clauseLiterals.get(i);
			String predicate = getPredicate(literal);
			
			if (predicate.equals(leftIndPredicate)) {
				String leftIndTerm = getTermAtPos(literal, leftIndAttNumber);
				
				// Check if IND is satisifed
				boolean indSatisfied = false;
				for (int j = 0; j < clauseLiterals.size(); j++) {
					Literal otherLiteral = clauseLiterals.get(j);
					String otherPredicate = getPredicate(otherLiteral);
					
					if (otherPredicate.equals(rightIndPredicate)) {
						String rightIndTerm = getTermAtPos(otherLiteral, rightIndAttNumber);
						
						if (leftIndTerm.equals(rightIndTerm)) {
							// IND satisfied
							indSatisfied = true;
							break;
						}
					}
				}
				
				// If IND is not satisfied, add literals that make IND satisfied
				if (!indSatisfied) {
					// Get constant value
					String value;
					if (isVariable(leftIndTerm)) {
						value = hashVariableToConstant.get(leftIndTerm);
					} else {
						value = leftIndTerm.substring(1, leftIndTerm.length()-1);
					}
					
					String[] modes = modesTogether.split(";");
					for (int k = 0; k < modes.length; k++) {
						modeBOperationForInd(recall, clauseLiterals, hashConstantToVariable, hashVariableToConstant, value, newInTerms, distinctTerms, modes[k], sqlStatement, rightIndAttNumber);
					}
				}
			}
		}
	}
	
	/*
	 * Apply a mode operation and add literals to clause
	 */
	private void modeBOperation(int recall, List<Literal> clauseLiterals, Map<String,String> hashConstantToVariable, Map<String, String> hashVariableToConstant, Map<String,Set<String\>> inTerms, Map<String,Set<String\>> newInTerms, Set<String> distinctTerms, String modeBString, SQLStmt sqlStatement, int attributeNumber) {
		String[] modeBTokens = modeBString.split("\\\\(|\\\\)");
		String modeBPredicate = modeBTokens[0];
		String[] modeBArguments = modeBTokens[1].split(",|\\\\s+");
		String attributeType = getArgumentType(modeBArguments[attributeNumber]);
		if (inTerms.containsKey(attributeType)) {
			String[] knownTerms = inTerms.get(attributeType).toArray(new String[inTerms.get(attributeType).size()]);
            voltQueueSQL(sqlStatement, (Object)knownTerms);
            VoltTable[] response = voltExecuteSQL();
    		List<Literal> newLiterals = createLiteralsFromResponse(recall, hashConstantToVariable, hashVariableToConstant, newInTerms, distinctTerms, response[0], modeBPredicate, modeBArguments);
    		//clauseLiterals.addAll(newLiterals);
    		addNotRepeated(clauseLiterals, newLiterals);
		}
	}
	
	/*
	 * Apply a mode operation for inclusion dependency and add literals to clause
	 */
	private void modeBOperationForInd(int recall, List<Literal> clauseLiterals, Map<String,String> hashConstantToVariable, Map<String, String> hashVariableToConstant, String value, Map<String,Set<String\>> newInTerms, Set<String> distinctTerms, String modeBString, SQLStmt sqlStatement, int attributeNumber) {
		String[] modeBTokens = modeBString.split("\\\\(|\\\\)");
		String modeBPredicate = modeBTokens[0];
		String[] modeBArguments = modeBTokens[1].split(",|\\\\s+");
		//String attributeType = getArgumentType(modeBArguments[attributeNumber]);
		
		String[] knownTerms = {value};
		voltQueueSQL(sqlStatement, (Object)knownTerms);
        VoltTable[] response = voltExecuteSQL();
		List<Literal> newLiterals = createLiteralsFromResponse(recall, hashConstantToVariable, hashVariableToConstant, newInTerms, distinctTerms, response[0], modeBPredicate, modeBArguments);
		//clauseLiterals.addAll(newLiterals);
		addNotRepeated(clauseLiterals, newLiterals);
	}
	
	/*
	 * Given a VoltTable, create literals for each row
	 */
	private List<Literal> createLiteralsFromResponse(int recall, Map<String,String> hashConstantToVariable, Map<String, String> hashVariableToConstant, Map<String,Set<String\>> newInTerms, Set<String> knownTerms, VoltTable table, String modeBPredicate, String[] modeBArguments) {
		List<Literal> literals = new LinkedList<Literal>();

		int solutionsCounter = 0;
		while(table.advanceRow() && solutionsCounter < recall) {
        	List<String> terms = new ArrayList<String>();
        	for (int i = 0; i < modeBArguments.length; i++) {
        		String value = table.getString(i);

        		if (getArgumentIdentifierType(modeBArguments[i]).equals(TYPE_CONSTANT)) {
        			terms.add('"'+value+'"');
        			knownTerms.add(value);
        		} else {
    				// INPUT or OUTPUT type
    				if(!hashConstantToVariable.containsKey(value)) {
    					String var = newVariable(varCounter);
    					varCounter++;
    					
    					hashConstantToVariable.put(value, var);
    					hashVariableToConstant.put(var, value);
    					
    					knownTerms.add(var);
    				}
    				terms.add(hashConstantToVariable.get(value));
    			}

    			// If OUTPUT variable, add constants to inTerms
    			if (getArgumentIdentifierType(modeBArguments[i]).equals(TYPE_OUTPUT) ||
    					getArgumentIdentifierType(modeBArguments[i]).equals(TYPE_CONSTANT)) {
    				String variableType = getArgumentType(modeBArguments[i]);
    				if(!newInTerms.containsKey(variableType)) {
    					newInTerms.put(variableType, new HashSet<String>());
    				}
    				newInTerms.get(variableType).add(value);
    			}
    		}
//        	String literal = modeBPredicate + "(" + String.join(",", terms) + ")";
//    		literals.add(literal);
        	literals.add(new Literal(modeBPredicate, terms));
    		solutionsCounter++;
		}
		return literals;
	}

	/*
	 * Get predicate name from literal
	 */
	private String getPredicate(Literal literal) {
		return literal.getPredicate();
	}
	
	/*
	 * Get term at the specified position from literal
	 */
	private String getTermAtPos(Literal literal, int position) {
		return literal.getTerms().get(position);
	}
	
	/*
	 * Add non-repeated newLiterals to literals
	 */
	private boolean addNotRepeated(List<Literal> literals, List<Literal> newLiterals) {
		boolean modified = false;
		for (Literal newLiteral : newLiterals) {
			if (!literals.contains(newLiteral)) {
				literals.add(newLiteral);
				modified = true;
			}
		}
		return modified;
	}

	/*
	 * Get identifier type: +, - or #
	 */
	private String getArgumentIdentifierType(String argument) {
		return argument.substring(0, 1);
	}

	/*
	 * Get argument type: from +type, extract type
	 */
	private String getArgumentType(String argument) {
		return argument.substring(1, argument.length());
	}

	/*
	 * Create new variable from variable counter
	 */
	private String newVariable(int varCounter) {
		return VARIABLE_PREFIX + varCounter;
	}
	
	/*
	 * Check if term is a variable
	 */
	private boolean isVariable(String term) {
		if (term.startsWith(VARIABLE_PREFIX)) 
			return true;
		return false;
	}
}
>>




spBottomClauseTemplate2(package,name,sqlSelect,temporaryTable) ::= <<
package <package>;

import org.voltdb.SQLStmt;
import org.voltdb.VoltProcedure;
import org.voltdb.VoltTable;

public class <name> extends VoltProcedure {

	public final SQLStmt sqlDelete = new SQLStmt("DELETE FROM <temporaryTable>;");
	public final SQLStmt sqlInsertSelect = new SQLStmt("INSERT INTO <temporaryTable> <sqlSelect>;");
	
	public VoltTable[] run() throws VoltAbortException {
	
		voltQueueSQL(sqlDelete);
		voltQueueSQL(sqlInsertSelect);
		voltExecuteSQL();
		return null;
	}
}
>>



spClearTemplate(package,name,sqlDelete) ::= <<
package <package>;

import org.voltdb.SQLStmt;
import org.voltdb.VoltProcedure;
import org.voltdb.VoltTable;

public class <name> extends VoltProcedure {

	public final SQLStmt sqlDelete = new SQLStmt("<sqlDelete>");
	
	public VoltTable[] run() throws VoltAbortException {
		voltQueueSQL(sqlDelete);
		voltExecuteSQL();
		return null;
	}
}
>>

